# from https://github.com/marketplace/actions/install-poetry-action

name: build and deploy to server

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

on:
  push:
    branches: [ "master", "main" ]
    paths-ignore: [ "docs/**", ".github/workflows/backup.yml"]
  workflow_dispatch:

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  linter:
    name: Linter
    runs-on: ubuntu-22.04
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v5
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install project
        run: poetry install --no-interaction

      #----------------------------------------------
      # Run poetry
      #----------------------------------------------
      - name: Run pre-commit
        uses: pre-commit/action@v3.0.1

  test:
    name: Test
    runs-on: ubuntu-22.04
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v5
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install project
        run: poetry install --no-interaction
      #----------------------------------------------
      #              run test suite
      #----------------------------------------------
      - name: Run tests
        run: |
          source .venv/bin/activate
          coverage run --source='.' manage.py test
          coverage report
          coverage xml


  build:
    name: Build
    runs-on: ubuntu-22.04
    needs: [test, linter]
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      #----------------------------------------------
      # Prepare commit info for deploy
      #----------------------------------------------
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v5
      #----------------------------------------------
      # Extact commit info for build
      #----------------------------------------------
      - name: Docker meta
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: ${{ env.GITHUB_REPOSITORY }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
      #----------------------------------------------
      # Prepare for building image
      #----------------------------------------------
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        id: buildx
      #----------------------------------------------
      # Auth to docker hub
      #----------------------------------------------
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      #----------------------------------------------
      # Build and upload image
      #----------------------------------------------
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: deploy/django/Dockerfile
          push: true
          ulimit: nofile=1048576:1048576
          builder: ${{ steps.buildx.outputs.name }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy
    runs-on: ubuntu-22.04
    needs: build
    environment:
      name: production
    steps:
      #----------------------------------------------
      # Copy docker compose production config
      #----------------------------------------------
      - name: Checkout
        uses: actions/checkout@v5

      #----------------------------------------------
      # Prepare commit info for deploy
      #----------------------------------------------
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v5

      #----------------------------------------------
      # Copy configs to server
      #----------------------------------------------
      - name: copy configs
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "deploy/docker_compose.prod.yml,deploy/nginx.conf,deploy/crontab.conf"
          target: "pythondigest/"

      #----------------------------------------------
      # Run docker compose
      #----------------------------------------------
      - name: executing remote ssh commands
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            export DJANGO_SECRET_KEY="${{ secrets.DJANGO_SECRET_KEY }}"
            export REDIS_URL="${{ secrets.REDIS_URL }}"
            export POSTGRES_HOST="${{ secrets.POSTGRES_HOST }}"
            export POSTGRES_PORT="${{ secrets.POSTGRES_PORT }}"
            export POSTGRES_DB="${{ secrets.POSTGRES_DB }}"
            export POSTGRES_USER="${{ secrets.POSTGRES_USER }}"
            export POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}"
            export SENTRY_DSN="${{ secrets.SENTRY_DSN }}"
            export SENTRY_ENVIRONMENT="${{ secrets.SENTRY_ENVIRONMENT }}"
            export BASE_DOMAIN="${{ secrets.BASE_DOMAIN }}"
            export USE_DOCKER="${{ secrets.USE_DOCKER }}"
            export GITTER_TOKEN="${{ secrets.GITTER_TOKEN }}"
            export TWITTER_CONSUMER_KEY="${{ secrets.TWITTER_CONSUMER_KEY }}"
            export TWITTER_CONSUMER_SECRET="${{ secrets.TWITTER_CONSUMER_SECRET }}"
            export TWITTER_TOKEN="${{ secrets.TWITTER_TOKEN }}"
            export TWITTER_TOKEN_SECRET="${{ secrets.TWITTER_TOKEN_SECRET }}"
            export TWITTER_BEARER_TOKEN="${{ secrets.TWITTER_BEARER_TOKEN }}"
            export TGM_BOT_ACCESS_TOKEN="${{ secrets.TGM_BOT_ACCESS_TOKEN }}"
            export TGM_CHANNEL="${{ secrets.TGM_CHANNEL }}"
            export IFTTT_MAKER_KEY="${{ secrets.IFTTT_MAKER_KEY }}"
            export VK_APP_ID="${{ secrets.VK_APP_ID }}"
            export VK_LOGIN="${{ secrets.VK_LOGIN }}"
            export VK_PASSWORD="${{ secrets.VK_PASSWORD }}"
            export CHAD_API_KEY="${{ secrets.CHAD_API_KEY }}"
            export CHAD_API_MODEL="${{ secrets.CHAD_API_MODEL }}"
            export CLS_ENABLED="${{ secrets.CLS_ENABLED }}"
            export CLS_URL_BASE="${{ secrets.CLS_URL_BASE }}"

            # image tag
            export COMMIT_TAG=${{env.GITHUB_REF_SLUG}}

            cd ~/pythondigest/deploy/

            # deploy app
            docker compose -f docker_compose.prod.yml -p digest pull
            docker compose -f docker_compose.prod.yml -p digest up -d

            # prepare static folders for serve
            cd ~/pythondigest/deploy/
            sudo usermod -a -G pythondigest www-data
            sudo chown -R :www-data static
            sudo chown -R :www-data media
            sudo chown -R :www-data dataset
            sudo chown -R :www-data report
            sudo chown -R :www-data pages

            # make link for serve django-remdow links:
            # django-remdow download external image to local png file
            # if original file is jpeg - download it and create symlink to png file
            # this commands create link outside container to this symlinks
            sudo mkdir -p /app/static/remdow/
            sudo ln -s /home/pythondigest/pythondigest/deploy/static/remdow/img /app/static/remdow/img

            # validate and reload nginx
            sudo mkdir -p /var/log/nginx/pythondigest/
            sudo nginx -t && sudo service nginx reload

            # update crontab
            crontab < crontab.conf
